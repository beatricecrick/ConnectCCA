<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>School Chat</title>
    <script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <meta name="google-signin-client_id" content="YOUR_GOOGLE_CLIENT_ID">
    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin">
</head>
<body>
    <h1>School Chat</h1>

    <!-- Username Input -->
    <div id="login">
        <div class="g-signin2" data-onsuccess="onSignIn"></div>
        <p id="error-message" style="color: red;"></p> <!-- Error message display -->
    </div>

    <!-- Chat UI (hidden until username is set) -->
    <div id="chatUI" style="display: none;">
        <h3>Welcome, <span id="userNameDisplay"></span></h3>
        <a href="#" onclick="signOut();">Sign out</a>
        <select id="chatSelect" onchange="selectChat()">
            <option value="">Select a chat</option>
        </select>
        <ul id="messages"></ul>
        <input id="message" autocomplete="off" />
        <button onclick="sendMessage()">Send</button>
        <input id="location" autocomplete="off" placeholder="Enter location name" />
        <button onclick="createLocation()">Create Group Chat</button>
    </div>

    <script>
        const socket = io();
        let userName = localStorage.getItem('userName') || '';
        let userId = localStorage.getItem('userId') || '';
        let classInfo = 'Class Name'; // This should be dynamically generated (example: Google Classroom class info)
        let currentChat = '';
        //Ensure google API loads
        window.onload = function() {
            initGoogleSignIn();
        };
        // Initialize Google Sign-In
        function initGoogleSignIn() {
            gapi.load('auth2', function() {
                gapi.auth2.init().then(function() {
                    if (gapi.auth2.getAuthInstance().isSignedIn.get()) {
                        onSignIn(gapi.auth2.getAuthInstance().currentUser.get());
                    }
                });
            });
        }

        // Handle Google Sign-In
        function onSignIn(googleUser) {
            var profile = googleUser.getBasicProfile();
            userName = profile.getName();
            userId = profile.getId();
            localStorage.setItem('userName', userName);
            localStorage.setItem('userId', userId);
            console.log('ID: ' + userId);
            console.log('Name: ' + userName);
            console.log('Image URL: ' + profile.getImageUrl());
            console.log('Email: ' + profile.getEmail());

            // Send user data to the server
            fetch('/addUser', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userName })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(error => { throw new Error(error.error); });
                }
                return response.json();
            })
            .then(data => {
                socket.emit('join', { classInfo, userName, userId });
                loadUsers();
                loadChats();
                showChatUI();
            })
            .catch(error => {
                document.getElementById('error-message').textContent = error.message; // Display error message
                console.error('Error:', error);
            });
        }

        // Show chat UI
        function showChatUI() {
            document.getElementById('login').style.display = 'none';
            document.getElementById('chatUI').style.display = 'block';
            document.getElementById('userNameDisplay').textContent = userName;
        }

        // Handle sending messages
        function sendMessage() {
            const msg = document.getElementById('message').value;
            console.log("msg value", msg)
            socket.emit('chat message', msg, currentChat);
            document.getElementById('message').value = ''; // Clear input after sending
        }

        // Handle creating a new location
        async function createLocation() {
            let baseLocationName = userName;
            let locationName = baseLocationName;
            let i = 1;

            while (await locationExists(locationName)) {
                locationName = `${baseLocationName}+${i}`;
                i++;
            }

            // Navigate to the add members page
            window.location.href = `/addMembers.html?location=${locationName}`;
        }

        // Check if a location exists
        async function locationExists(locationName) {
            const response = await fetch(`/checkLocation?locationName=${locationName}`);
            const data = await response.json();
            return data.exists;
        }

        // Receive messages and update the chat UI
        socket.on('chat message', function(data) {
            console.log("running chatmsg")

            if (data && data.msg && data.chat === currentChat) {  // Ensure data is not undefined and matches the current chat
                console.log("data")
                const item = document.createElement('li');
                item.textContent = `[${data.class}] ${data.msg}`;
                document.getElementById('messages').appendChild(item);
            }
            else{
                console.log("data is undefined or does not match current chat")
                console.log("data: ", data)
                console.log("datamsg: ", data.msg)
            }
        });

        // Fetch existing users from Firebase
        function loadUsers() {
            fetch('/getUsers')
                .then(response => response.json())
                .then(users => {
                    console.log('Users:', users);
                    // You can display the list of users here to allow direct messaging
                });
        }

        // Fetch existing chats from Firebase
        function loadChats() {
            fetch(`/getChats?userName=${userName}`)
                .then(response => response.json())
                .then(chats => {
                    const chatSelect = document.getElementById('chatSelect');
                    chats.forEach(chat => {
                        const option = document.createElement('option');
                        option.value = chat;
                        option.textContent = chat;
                        chatSelect.appendChild(option);
                    });
                });
        }

        // Select a chat
        function selectChat() {
            currentChat = document.getElementById('chatSelect').value;
            document.getElementById('messages').innerHTML = ''; // Clear previous messages
            // Fetch and display messages for the selected chat
            fetch(`/getMessages?chat=${currentChat}`)
                .then(response => response.json())
                .then(messages => {
                    messages.forEach(message => {
                        const item = document.createElement('li');
                        item.textContent = `[${message.class}] ${message.msg}`;
                        document.getElementById('messages').appendChild(item);
                    });
                });
        }

        // Sign out the user
        function signOut() {
            var auth2 = gapi.auth2.getAuthInstance();
            auth2.signOut().then(function () {
                console.log('User signed out.');
                localStorage.removeItem('userName');
                localStorage.removeItem('userId');
                location.reload(); // Reload the page to show the login screen
            });
        }

        // Ensure the chat UI is shown if the user navigates back
        // window.addEventListener('popstate', function(event) {
        //     if (userName) {
        //         showChatUI();
        //     }
        // });

        // // Show chat UI if user is already logged in
        // if (userName) {
        //     showChatUI();
        //     loadChats();
        // }

        // Initialize Google Sign-In
    </script>
</body>
</html>